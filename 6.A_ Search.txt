from queue import PriorityQueue

def a_star(graph, start, goal, h):
    open_list = PriorityQueue()
    open_list.put((0, start))
    g = {start: 0}
    came_from = {}

    while not open_list.empty():
        _, current = open_list.get()

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]
        
        for neighbor, cost in graph[current].items():
            new_cost = g[current] + cost
            if neighbor not in g or new_cost < g[neighbor]:
                g[neighbor] = new_cost
                f = new_cost + h[neighbor]
                open_list.put((f, neighbor))
                came_from[neighbor] = current

    return None

graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'D': 1, 'E': 6},
    'C': {'F': 5},
    'D': {}, 'E': {'F': 1}, 'F': {}
}

h = {'A': 6, 'B': 5, 'C': 4, 'D': 3, 'E': 2, 'F': 0}

path = a_star(graph, 'A', 'F', h)
print("Path:", path)
